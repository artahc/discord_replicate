// Mocks generated by Mockito 5.0.17 from annotations
// in discord_replicate/test/bloc_test/user_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:discord_replicate/model/credential.dart' as _i6;
import 'package:discord_replicate/model/user.dart' as _i2;
import 'package:discord_replicate/repository/user_repository.dart' as _i3;
import 'package:discord_replicate/util/graphql_client_helper.dart' as _i5;
import 'package:discord_replicate/util/hive_database_helper.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeUser_0 extends _i1.Fake implements _i2.User {}

class _FakeException_1 extends _i1.Fake implements Exception {}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i3.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.User> load(String? uid) =>
      (super.noSuchMethod(Invocation.method(#load, [uid]),
              returnValue: Future<_i2.User>.value(_FakeUser_0()))
          as _i4.Future<_i2.User>);
  @override
  _i4.Future<dynamic> save(_i2.User? user) =>
      (super.noSuchMethod(Invocation.method(#save, [user]),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  Exception mapException(Exception? e) =>
      (super.noSuchMethod(Invocation.method(#mapException, [e]),
          returnValue: _FakeException_1()) as Exception);
}

/// A class which mocks [GraphQLClientHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockGraphQLClientHelper extends _i1.Mock
    implements _i5.GraphQLClientHelper {
  MockGraphQLClientHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i6.Credential?> Function() get tokenProvider =>
      (super.noSuchMethod(Invocation.getter(#tokenProvider),
              returnValue: () => Future<_i6.Credential?>.value())
          as _i4.Future<_i6.Credential?> Function());
  @override
  set tokenProvider(_i4.Future<_i6.Credential?> Function()? _tokenProvider) =>
      super.noSuchMethod(Invocation.setter(#tokenProvider, _tokenProvider),
          returnValueForMissingStub: null);
  @override
  _i4.Future<Map<String, dynamic>> query(String? query,
          {Map<String, dynamic>? variables = const {}}) =>
      (super.noSuchMethod(
              Invocation.method(#query, [query], {#variables: variables}),
              returnValue:
                  Future<Map<String, dynamic>>.value(<String, dynamic>{}))
          as _i4.Future<Map<String, dynamic>>);
  @override
  Exception mapException(Exception? e) =>
      (super.noSuchMethod(Invocation.method(#mapException, [e]),
          returnValue: _FakeException_1()) as Exception);
}

/// A class which mocks [HiveDatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveDatabaseHelper extends _i1.Mock
    implements _i7.HiveDatabaseHelper {
  MockHiveDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<dynamic> put<T>(String? boxName, dynamic key, T? value) =>
      (super.noSuchMethod(Invocation.method(#put, [boxName, key, value]),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Future<T?> get<T>(String? boxName, dynamic key) =>
      (super.noSuchMethod(Invocation.method(#get, [boxName, key]),
          returnValue: Future<T?>.value()) as _i4.Future<T?>);
  @override
  _i4.Future<dynamic> putAll<T>(String? boxName, Map<dynamic, T>? values) =>
      (super.noSuchMethod(Invocation.method(#putAll, [boxName, values]),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
}
